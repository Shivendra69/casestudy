package com.projectmanagement;

import dao.ProjectRepositoryImpl;
import entity.Employee;
import entity.Project;
import entity.Task;
import exception.EmployeeNotFoundException;
import exception.ProjectNotFoundException;
import org.junit.Before;
import org.junit.Test;
import util.DBConnUtil;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;

import static org.junit.Assert.*;

public class ProjectRepositoryTest {
    private ProjectRepositoryImpl repo;

    @Before
    public void setUp() {
        // Initialize the repository and database connection
        repo = new ProjectRepositoryImpl();
        // Reset the database state before each test
        cleanUpDatabase();
    }

    private void cleanUpDatabase() {
        // Clean up database tables to ensure a fresh state
        try (Connection conn = DBConnUtil.getConnection()) {
            conn.createStatement().execute("DELETE FROM Task");
            conn.createStatement().execute("DELETE FROM Employee");
            conn.createStatement().execute("DELETE FROM Project");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void testCreateEmployeeSuccessfully() {
        // Test case 1: Test if employee is created successfully
        Employee emp = new Employee(1, "John Doe", "Developer", "M", 50000.0, 0);
        boolean result = repo.createEmployee(emp);

        assertTrue("Employee should be created successfully", result);

        // Verify employee exists in the database
        try (Connection conn = DBConnUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement("SELECT * FROM Employee WHERE employeeId = ?")) {
            stmt.setInt(1, 1);
            var rs = stmt.executeQuery();
            assertTrue("Employee should exist in the database", rs.next());
            assertEquals("Employee name should match", "John Doe", rs.getString("employeeName"));
        } catch (SQLException e) {
            fail("Database error: " + e.getMessage());
        }
    }

    @Test
    public void testCreateTaskSuccessfully() {
        // Test case 2: Test if task is created successfully
        // First, create a project and employee
        Project proj = new Project(1, "Project A", "Test Project", "2025-04-01", "started");
        Employee emp = new Employee(1, "Jane Doe", "Tester", "F", 60000.0, 1);
        repo.createProject(proj);
        repo.createEmployee(emp);

        Task task = new Task(1, "Test Task", 1, 1, "Assigned");
        boolean result = repo.createTask(task);

        assertTrue("Task should be created successfully", result);

        // Verify task exists in the database
        try (Connection conn = DBConnUtil.getConnection();
             PreparedStatement stmt = conn.prepareStatement("SELECT * FROM Task WHERE taskId = ?")) {
            stmt.setInt(1, 1);
            var rs = stmt.executeQuery();
            assertTrue("Task should exist in the database", rs.next());
            assertEquals("Task name should match", "Test Task", rs.getString("taskName"));
        } catch (SQLException e) {
            fail("Database error: " + e.getMessage());
        }
    }

    @Test
    public void testSearchProjectsAndTasksAssignedToEmployee() {
        // Test case 3: Test search for projects and tasks assigned to employee
        // Setup: Create employee, project, and tasks
        Employee emp = new Employee(1, "Alice Smith", "Manager", "F", 70000.0, 0);
        Project proj = new Project(1, "Project B", "Development", "2025-04-01", "dev");
        Task task1 = new Task(1, "Task 1", 1, 1, "started");
        Task task2 = new Task(2, "Task 2", 1, 1, "completed");

        repo.createEmployee(emp);
        repo.createProject(proj);
        repo.assignProjectToEmployee(1, 1); // Assign project to employee
        repo.createTask(task1);
        repo.createTask(task2);

        // Search for tasks assigned to employee in project
        List<Task> tasks = repo.getAllTasks(1, 1);

        assertNotNull("Task list should not be null", tasks);
        assertEquals("Should return 2 tasks", 2, tasks.size());
        assertTrue("Task 1 should be in the list", tasks.stream().anyMatch(t -> t.getTaskName().equals("Task 1")));
        assertTrue("Task 2 should be in the list", tasks.stream().anyMatch(t -> t.getTaskName().equals("Task 2")));
    }

    @Test
    public void testExceptionsThrownCorrectly() {
        // Test case 4: Test if exceptions are thrown correctly
        // Scenario 1: Delete non-existent employee
        try {
            repo.deleteEmployee(999); // Non-existent employee ID
            fail("Should throw EmployeeNotFoundException");
        } catch (EmployeeNotFoundException e) {
            assertEquals("Expected exception message", "Employee with ID 999 not found", e.getMessage());
        } catch (Exception e) {
            fail("Unexpected exception: " + e.getMessage());
        }

        // Scenario 2: Delete non-existent project
        try {
            repo.deleteProject(999); // Non-existent project ID
            fail("Should throw ProjectNotFoundException");
        } catch (ProjectNotFoundException e) {
            assertEquals("Expected exception message", "Project with ID 999 not found", e.getMessage());
        } catch (Exception e) {
            fail("Unexpected exception: " + e.getMessage());
        }

        // Scenario 3: Assign project to non-existent employee
        try {
            repo.assignProjectToEmployee(1, 999); // Non-existent employee ID
            fail("Should throw EmployeeNotFoundException");
        } catch (EmployeeNotFoundException e) {
            assertEquals("Expected exception message", "Employee with ID 999 not found", e.getMessage());
        } catch (Exception e) {
            fail("Unexpected exception: " + e.getMessage());
        }

        // Scenario 4: Assign task to non-existent employee/project
        try {
            repo.assignTaskInProjectToEmployee(1, 999, 1); // Non-existent project ID
            fail("Should throw ProjectNotFoundException");
        } catch (ProjectNotFoundException e) {
            assertEquals("Expected exception message", "Project with ID 999 not found", e.getMessage());
        } catch (Exception e) {
            fail("Unexpected exception: " + e.getMessage());
        }
    }
}
